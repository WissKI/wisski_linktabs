<?php


function wisski_linktabs_menu() {

  $items = array();
  
  $items['admin/settings/wisski/wisski_linktab'] = array(
    'title'    => t('Linktab'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wisski_linktab_main'),
#    'access callback' => 'wisski_loader',
#    'access arguments' => array(1, 'wisski access graph'),
    'access arguments' => array('wisski administrate page'),
    'type'     => MENU_LOCAL_TASK,
  );
  
  $to_add = variable_get('wisski_linktab_items', array());
  foreach($to_add as $key => $value) {
    $add_to = $value['add_to'];
    $point_to = $value['point_to'];
    
    $use_path_from = $value['use_path_from'];
    
    $use_path_to = $value['use_path_to'];

    $data = wisski_pathbuilder_getPathData($point_to);
    
    $items['node/%node/' . $point_to] = array(
      'title'    => t('Create and link ' . $data['name']),
      'page callback' => 'wisski_linktabs_redirect',
      'page arguments' => array(1, $point_to, $use_path_to, $use_path_from),
      'access callback' => 'wisski_loader',
      'access arguments' => array(1, 'wisski access graph'),
      'type'     => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

function wisski_linktabs_redirect($return, $pathid, $use_path_to, $use_path_from) {
  
  $sparql = wisski_pathbuilder_get_sparql($use_path_from, 'FILTER ( ?x0 = <' . wisski_store_getObj()->wisski_ARCAdapter_delNamespace($return->title) . '> ) ');

  $sprows = wisski_store_getObj()->wisski_ARCAdapter_getStore()->query($sparql, 'rows');
  
  drupal_goto('node/add/individual/' . $pathid, $use_path_to . '=' . urlencode($sprows[0]['out']));
}

function wisski_linktab_main_submit($form, $form_state) {
  
  $items = array();//variable_get('wisski_linktab_items', array());
  
  foreach($form_state['values'] as $key => $value) {
    
    if(empty($value))
      continue;
       
    if(strpos($key, 'add_to') !== FALSE) {
      $id = substr($key, 6);
      $items[$id]['add_to'] = $value;
      continue;
    }
    if(strpos($key, 'point_to') !== FALSE) {
      $id = substr($key, 8);
      $items[$id]['point_to'] = $value;
      continue;
    }
    if(strpos($key, 'use_path_to') !== FALSE) {
      $id = substr($key, 11);
      $items[$id]['use_path_to'] = $value;
      continue;
    }
    if(strpos($key, 'use_path_from') !== FALSE) {
      $id = substr($key, 13);
      $items[$id]['use_path_from'] = $value;
      continue;
    }
    
  }
  
  variable_set('wisski_linktab_items', $items);
  
}

function wisski_linktab_main() {
  $form = array();
  
  $items = variable_get('wisski_linktab_items', array());
  
  $items[] = array();
  
  $all_groups = wisski_pathbuilder_getEnabledInternaGroups();
  
  $all_groups_namedlist = array(0 => t('- Select -'));
    
  foreach($all_groups as $id) {
    $all_data[$id] = wisski_pathbuilder_getPathData($id);
    $all_groups_namedlist[$id] = $all_data[$id]['name'] . ' (' . $id . ')';
  }
  
  foreach($items as $itemid => $values) {
    $possible_paths = array();
    
    $form['linktab' . $itemid] = array(
      '#type' => 'fieldset',
      '#collapsible' => '1',
      '#collapsed' => FALSE,
      '#title' => t('Link tab'),
    );
    
    $form['linktab' . $itemid]['add_to' . $itemid] = array(
      '#type' => 'select',
      '#default_value' => $values['add_to'],
      '#key_type' => 'associative',
      '#multiple_toggle' => '1',
      '#type' => 'select',
      '#options' => $all_groups_namedlist,
      '#title' => t('Where should the tab be added?'),
    );
    
    $form['linktab' . $itemid]['point_to' . $itemid] = array(
      '#type' => 'select',
      '#default_value' => $values['point_to'],
      '#key_type' => 'associative',
      '#multiple_toggle' => '1',
      '#type' => 'select',
      '#options' => $all_groups_namedlist,
      '#title' => t('Where should it point to?'),
    );
    
    $path_add_to = unserialize($all_data[$values['add_to']]['path_array']);
    $path_point_to = $all_data[$values['point_to']]['path_array'];

    $opt_from = array(t('Click save for calculation'));
    
    if(!empty($values['add_to'])) {
      $all_paths = wisski_pathbuilder_getEnabledInternaMembers($values['add_to'], TRUE, TRUE);
      $opt_from = array();
    
      foreach($all_paths as $pathid) {
        $path_data = wisski_pathbuilder_getPathData($pathid);
        $opt_from[$pathid] = $path_data['name'];
      }
    
    }
    
     
    $form['linktab' . $itemid]['use_path_from' . $itemid] = array(
      '#type' => 'select',
      '#default_value' => $values['use_path_from'],
      '#key_type' => 'associative',
      '#multiple_toggle' => '1',
      '#type' => 'select',
      '#options' => $opt_from,
      '#title' => t('Which path should be used as a source for the reference?'),
    );

    

    $all_paths = wisski_pathbuilder_getEnabledInternaMembers($values['point_to'], TRUE, TRUE);

    $param = 'x' . floor(count($path_add_to)/2);

    $concept = $path_add_to[$param];

    foreach($all_paths as $pathid) {
      $path_data = wisski_pathbuilder_getPathData($pathid);

      $path_array = unserialize($path_data['path_array']);
      
      // no disamb? not relevant.
      if(empty($path_data['disamb']))
        continue;
      
      // we've found a path which might be suitable
      if($path_array['x' . ($path_data['disamb']-1)] == $concept) {
        $possible_paths[$path_data['id']] = $path_data['name']; 
      }
#        drupal_set_message(serialize($path_data));
    }
    
    $options = array(t('Click save for calculation'));
    
    if(empty($possible_paths))
      $options = array(t('No paths possible.'));
    else   
      $options = $possible_paths;
    
    $form['linktab' . $itemid]['use_path_to' . $itemid] = array(
      '#type' => 'select',
      '#default_value' => $values['use_path_to'],
      '#key_type' => 'associative',
      '#multiple_toggle' => '1',
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('Which path should be used as a target for the reference?'),
    );
    
    
  }
  
  $form['sorting']['sort_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
    
  return $form;
}
